<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.monthly.mapper.AdminMapper">
    <!--판매자 검색 인서트 -->
    <insert id="insert">
        <selectKey keyProperty="sellerNumber" order="BEFORE" resultType="long">
            SELECT SEQ_SELLER.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO MONTHLY_SELLER(SELLER_NUMBER, SELLER_NAME, SELLER_ID, SELLER_PASSWORD, SELLER_PHONE_NUMBER, SELLER_POSTCODE,SELLER_ADDRESS1, SELLER_ADDRESS2,
        SELLER_EMAIL, SELLER_CONTENTS, SELLER_COMPANY_REGISTER_NUMBER)
        VALUES (#{sellerNumber},#{sellerName},#{sellerId},#{sellerPassword},#{sellerPhoneNumber},#{sellerPostcode},#{sellerAddress1}, #{sellerAddress2},#{sellerEmail},#{sellerContents},#{sellerCompanyRegisterNumber})
    </insert>
    <!--상품검색 테스트 인서트 -->
    <insert id="insertProduct">
        <selectKey keyProperty="productNumber" order="BEFORE" resultType="long">
            SELECT SEQ_PRODUCT.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO MONTHLY_PRODUCT (PRODUCT_NUMBER, PRODUCT_NAME, PRODUCT_STATUS, BRAND_NUMBER, PRODUCT_REGISTER_DATE)
        VALUES (#{productNumber}, #{productName}, #{productStatus},
        (SELECT B.BRAND_NUMBER
        FROM MONTHLY_BRAND B
        LEFT JOIN MONTHLY_SELLER S ON B.SELLER_NUMBER = S.SELLER_NUMBER
        WHERE B.BRAND_NAME = #{brandName}),
        #{productRegisterDate})
        </insert>
<!--    관리자 로그인-->
    <select id="findAdminNumber" resultType="long" >
        SELECT ADMIN_NUMBER
        FROM MONTHLY_ADMIN
        WHERE ADMIN_ID =#{adminId} and ADMIN_PASSWORD=#{adminPassword}
    </select>

    <select id="sellerApplication" resultType="adminChartVo">
        SELECT TO_CHAR(b.dt, 'YYYY-MM') AS SELLER_REGISTER_DATE
        , NVL(SUM(a.REGISTRATION_COUNT), 0) REGISTRATION_COUNT
        FROM ( SELECT TO_CHAR(SELLER_REGISTER_DATE, 'YYYY-MM-DD') AS SELLER_REGISTER_DATE
        , COUNT(*) REGISTRATION_COUNT
        FROM MONTHLY_SELLER
        WHERE SELLER_REGISTER_DATE BETWEEN TO_DATE('2023-01-01', 'YYYY-MM-DD')
        AND TO_DATE('2023-12-31', 'YYYY-MM-DD')
        GROUP BY SELLER_REGISTER_DATE
        ) a
        , ( SELECT TO_DATE('2023-01-01','YYYY-MM-DD') + LEVEL - 1 AS dt
        FROM dual
        <![CDATA[
            CONNECT BY LEVEL <= (TO_DATE('2023-12-31','YYYY-MM-DD') - TO_DATE('2023-01-01','YYYY-MM-DD') + 1)
             ]]>
        ) b
        WHERE b.dt = a.SELLER_REGISTER_DATE(+)
        GROUP BY TO_CHAR(b.dt, 'YYYY-MM')
        ORDER BY TO_CHAR(b.dt, 'YYYY-MM')
    </select>

    <select id="paymentCount" resultType="adminChartVo">
        SELECT TO_CHAR(b.dt, 'YYYY-MM') AS PAYMENT_DATE,
        NVL(SUM(a.PAYMENT_PRICE), 0) AS PAYMENT_PRICE_COUNT
        FROM (
        SELECT TO_CHAR(PAYMENT_DATE, 'YYYY-MM') AS PAYMENT_DATE,
        PAYMENT_PRICE,
        PAYMENT_STATUS
        FROM MONTHLY_PAYMENT
        WHERE PAYMENT_STATUS = 1
        AND PAYMENT_DATE BETWEEN TO_DATE('2023-01-01', 'YYYY-MM-DD') AND TO_DATE('2023-12-31', 'YYYY-MM-DD')
        ) a
        RIGHT JOIN (
        SELECT TO_DATE('2023-' || LPAD(LEVEL, 2, '0'), 'YYYY-MM') AS dt
        FROM dual
        <![CDATA[
            CONNECT BY LEVEL <= 12
              ]]>
        ) b ON TO_CHAR(b.dt, 'YYYY-MM') = a.PAYMENT_DATE
        GROUP BY TO_CHAR(b.dt, 'YYYY-MM')
        ORDER BY TO_CHAR(b.dt, 'YYYY-MM')
    </select>

<!--판매자 검색 기능-->
    <select id="selectSeller" resultType="sellerDto">
        SELECT SELLER_NUMBER, SELLER_NAME, SELLER_ID, SELLER_PASSWORD, SELLER_PHONE_NUMBER,SELLER_ADDRESS1,
               SELLER_EMAIL, SELLER_CONTENTS,SELLER_REGISTER_DATE,
               SELLER_COMPANY_REGISTER_NUMBER,SELLER_STATUS,SELLER_ADDRESS2
        FROM(SELECT ROWNUM AS RNUM,SELLER_NUMBER, SELLER_NAME, SELLER_ID, SELLER_PASSWORD, SELLER_PHONE_NUMBER,SELLER_ADDRESS1,
               SELLER_EMAIL, SELLER_CONTENTS,SELLER_REGISTER_DATE,
               SELLER_COMPANY_REGISTER_NUMBER,SELLER_STATUS,SELLER_ADDRESS2
        FROM(SELECT SELLER_NUMBER, SELLER_NAME, SELLER_ID, SELLER_PASSWORD, SELLER_PHONE_NUMBER,SELLER_ADDRESS1,
        SELLER_EMAIL, SELLER_CONTENTS,SELLER_REGISTER_DATE,
        SELLER_COMPANY_REGISTER_NUMBER,SELLER_STATUS,SELLER_ADDRESS2 FROM MONTHLY_SELLER
                        <where>
                            <trim prefixOverrides="AND">
                                <if test="searchVo.searchInput != ''">
                                    <if test="'seller-number'.equals(searchVo.searchSelect)">
                                        SELLER_NUMBER = #{searchVo.searchInput}
                                    </if>
                                    <if test="'seller-name'.equals(searchVo.searchSelect)">
                                        SELLER_NAME LIKE '%' || #{searchVo.searchInput} || '%'
                                    </if>
                                    <if test="'seller-id'.equals(searchVo.searchSelect)">
                                        SELLER_ID LIKE '%' || #{searchVo.searchInput} || '%'
                                    </if>
                                </if>
                                <trim prefix="AND">
                                    <if test="'today'.equals(searchVo.period)">
                                        TRUNC(SELLER_REGISTER_DATE) = TRUNC(SYSDATE)
                                    </if>
                                    <if test="'yesterday'.equals(searchVo.period)">
                                        TRUNC(SELLER_REGISTER_DATE) = TRUNC(SYSDATE) - 1
                                    </if>
                                </trim>
                            </trim>
                        </where>
                        ORDER BY SELLER_REGISTER_DATE DESC
                )
        <![CDATA[
                 WHERE ROWNUM <= #{criteria.page} *#{criteria.amount}
             ]]>
       )
        WHERE RNUM > (#{criteria.page}-1) * #{criteria.amount}
    </select>

    <select id="sellerGetTotal" resultType="_int">
        SELECT COUNT(SELLER_NUMBER) FROM MONTHLY_SELLER
        <where>
            <trim prefixOverrides="AND">
                <if test="searchVo.searchInput != ''">
                    <if test="'seller-number'.equals(searchVo.searchSelect)">
                        SELLER_NUMBER = #{searchVo.searchInput}
                    </if>
                    <if test="'seller-name'.equals(searchVo.searchSelect)">
                        SELLER_NAME LIKE '%' || #{searchVo.searchInput} || '%'
                    </if>
                    <if test="'seller-id'.equals(searchVo.searchSelect)">
                        SELLER_ID LIKE '%' || #{searchVo.searchInput} || '%'
                    </if>
                </if>
                <trim prefix="AND">
                    <if test="'today'.equals(searchVo.period)">
                        TRUNC(SELLER_REGISTER_DATE) = TRUNC(SYSDATE)
                    </if>
                    <if test="'yesterday'.equals(searchVo.period)">
                        TRUNC(SELLER_REGISTER_DATE) = TRUNC(SYSDATE) - 1
                    </if>
                </trim>
            </trim>
        </where>
    </select>




<!--상품 검색 기능-->
    <select id="searchProduct" resultType="productVo">
SELECT  PRODUCT_NUMBER, PRODUCT_NAME, PRODUCT_STATUS, BRAND_NAME,
       PRODUCT_REGISTER_DATE, SELLER_PHONE_NUMBER, SELLER_EMAIL, SELLER_NAME
    FROM(
        SELECT ROWNUM AS RNUM, PRODUCT_NUMBER, PRODUCT_NAME, PRODUCT_STATUS, BRAND_NAME,
               PRODUCT_REGISTER_DATE, SELLER_PHONE_NUMBER, SELLER_EMAIL, SELLER_NAME
        FROM (
            SELECT P.PRODUCT_NUMBER, P.PRODUCT_NAME, P.PRODUCT_STATUS, B.BRAND_NAME,
        P.PRODUCT_REGISTER_DATE, S.SELLER_PHONE_NUMBER, S.SELLER_EMAIL, S.SELLER_NAME
            FROM MONTHLY_PRODUCT P
                 LEFT OUTER JOIN MONTHLY_BRAND B ON P.BRAND_NUMBER = B.BRAND_NUMBER
                 LEFT OUTER JOIN MONTHLY_SELLER S ON B.SELLER_NUMBER = S.SELLER_NUMBER
        <where>
            <if test="searchVo.searchInput != ''">
                <choose>
                    <when test="'goods-number'.equals(searchVo.searchSelect)">
                      P.PRODUCT_NUMBER = #{searchVo.searchInput}
                    </when>
                    <when test="'brand-name'.equals(searchVo.searchSelect)">
                        B.BRAND_NAME LIKE '%' ||#{searchVo.searchInput}|| '%'
                    </when>
                    <when test="'goods-name'.equals(searchVo.searchSelect)">
                        P.PRODUCT_NAME LIKE '%' || #{searchVo.searchInput} || '%'
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY P.PRODUCT_NUMBER DESC )S1
                <![CDATA[
                     WHERE ROWNUM <= #{criteria.page}*#{criteria.amount}
            ]]>
    )S2 WHERE RNUM > (#{criteria.page}-1)*#{criteria.amount}
    </select>
    <select id="productGetTotal" resultType="_INT">
        SELECT COUNT(P.PRODUCT_NUMBER)
        FROM MONTHLY_PRODUCT P
        LEFT OUTER JOIN MONTHLY_BRAND B ON P.BRAND_NUMBER = B.BRAND_NUMBER
        LEFT OUTER JOIN MONTHLY_SELLER S ON B.SELLER_NUMBER = S.SELLER_NUMBER
        <where>
            <if test="searchVo.searchInput != ''">
                <choose>
                    <when test="'goods-number'.equals(searchVo.searchSelect)">
                       P.PRODUCT_NUMBER = #{searchVo.searchInput}
                    </when>
                    <when test="'brand-name'.equals(searchVo.searchSelect)">
                       B.BRAND_NAME LIKE '%' ||#{searchVo.searchInput}|| '%'
                    </when>
                    <when test="'goods-name'.equals(searchVo.searchSelect)">
                        P.PRODUCT_NAME LIKE '%' || #{searchVo.searchInput} || '%'
                    </when>
                </choose>
            </if>
        </where>
    </select>


    <!--전체 회원 조회-->
    <select id="searchUser" resultType="userVo">
SELECT USER_NUMBER,USER_NAME,USER_STATUS,USER_ID,USER_PHONE_NUMBER,
       USER_BIRTHDAY,USER_EMAIL
        FROM(
            SELECT ROWNUM AS RNUM,USER_NUMBER,USER_NAME,USER_STATUS,USER_ID,USER_PHONE_NUMBER,
        USER_BIRTHDAY,USER_EMAIL
            FROM(
                 SELECT USER_NUMBER,USER_NAME,USER_STATUS,USER_ID,USER_PHONE_NUMBER,
                        USER_BIRTHDAY,USER_EMAIL
                 FROM MONTHLY_USER
        <where>
            <if test="!''.equals(searchVo.searchInput)">
                <choose>
                    <when test="'member-number'.equals(searchVo.searchSelect)">
                        USER_NUMBER = #{searchVo.searchInput}
                    </when>
                    <when test="'member-name'.equals(searchVo.searchSelect)">
                        USER_NAME LIKE '%' ||#{searchVo.searchInput}|| '%'
                    </when>
                    <when test="'member-id'.equals(searchVo.searchSelect)">
                        USER_ID LIKE '%' || #{searchVo.searchInput} || '%'
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY USER_NUMBER DESC )S1
                <![CDATA[
                     WHERE ROWNUM <= #{criteria.page}*#{criteria.amount}
            ]]>
         )S2 WHERE RNUM > (#{criteria.page}-1)*#{criteria.amount}
    </select>

    <select id="userGetTotal" resultType="_int">
        SELECT COUNT(USER_NUMBER) FROM MONTHLY_USER
        <where>
            <if test="!''.equals(searchVo.searchInput)">
                <choose>
                    <when test="'member-number'.equals(searchVo.searchSelect)">
                        USER_NUMBER = #{searchVo.searchInput}
                    </when>
                    <when test="'member-name'.equals(searchVo.searchSelect)">
                         USER_NAME LIKE '%' ||#{searchVo.searchInput}|| '%'
                    </when>
                    <when test="'member-id'.equals(searchVo.searchSelect)">
                         USER_ID LIKE '%' || #{searchVo.searchInput} || '%'
                    </when>
                </choose>
            </if>
        </where>
    </select>


    <!--판매자의 브랜드,구독자 조회-->
<select id="selectSubUser" resultType="productVo">
    SELECT MP.PRODUCT_NUMBER,MP.PRODUCT_NAME ,MB.BRAND_NAME,
           (SELECT COUNT(SUBS_NUMBER) FROM MONTHLY_SUBSCRIBE MS
            WHERE PRODUCT_NUMBER = MP.PRODUCT_NUMBER) AS SUBS_NUMBER_COUNT
    FROM MONTHLY_PRODUCT MP JOIN MONTHLY_BRAND MB on MP.BRAND_NUMBER = MB.BRAND_NUMBER
    WHERE SELLER_NUMBER =#{sellerNumber} ORDER BY PRODUCT_NUMBER

</select><!--판매자의 브랜드페이지 이름만 띄우기-->
    <select id="brandName" resultType="productVo">
   SELECT BRAND_NAME FROM MONTHLY_BRAND WHERE SELLER_NUMBER = #{sellerNumber}
    </select>

<!--상품별 구독자 검색-->
    <select id="productSubsUserList" resultType="subsVo">
        SELECT USER_NUMBER, USER_NAME, USER_ID, SUBS_NUMBER, SUBS_START_DATE,BRAND_NUMBER,
               PRODUCT_NUMBER, PRODUCT_NAME, USER_PHONE_NUMBER
            FROM (
                SELECT ROWNUM AS RNUM,USER_NUMBER, USER_NAME, USER_ID, SUBS_NUMBER, SUBS_START_DATE, BRAND_NUMBER,
                 PRODUCT_NUMBER, PRODUCT_NAME, USER_PHONE_NUMBER
                 FROM(
                    SELECT U.USER_NUMBER, U.USER_NAME, U.USER_ID, S.SUBS_NUMBER, S.SUBS_START_DATE, B.BRAND_NUMBER, P.PRODUCT_NUMBER, P.PRODUCT_NAME, U.USER_PHONE_NUMBER
                    FROM MONTHLY_SUBSCRIBE S
                    LEFT OUTER JOIN MONTHLY_USER U ON U.USER_NUMBER = S.USER_NUMBER
                    LEFT OUTER JOIN MONTHLY_PRODUCT P ON S.PRODUCT_NUMBER = P.PRODUCT_NUMBER
                    LEFT OUTER JOIN MONTHLY_BRAND B ON P.BRAND_NUMBER = B.BRAND_NUMBER
        WHERE S.PRODUCT_NUMBER = #{searchVo.productNumber}
        <if test="!''.equals(searchVo.subscriberInput)">
            AND S.USER_ID LIKE '%' || #{searchVo.subscriberInput} || '%'
        </if>
        <if test="'3day'.equals(searchVo.period)">
            AND (
            EXTRACT(DAY FROM S.SUBS_START_DATE) = EXTRACT(DAY FROM SYSDATE + INTERVAL '3' DAY)
            AND EXTRACT(DAY FROM S.SUBS_START_DATE) = EXTRACT(DAY FROM LAST_DAY(S.SUBS_START_DATE))
            OR (
            EXTRACT(DAY FROM SYSDATE + INTERVAL '3' DAY) = EXTRACT(DAY FROM S.SUBS_START_DATE)
            AND EXTRACT(DAY FROM S.SUBS_START_DATE) != EXTRACT(DAY FROM LAST_DAY(S.SUBS_START_DATE))
            )
            )
        </if>
                     ORDER BY S.SUBS_NUMBER DESC )S1
        <![CDATA[
             WHERE ROWNUM <= #{criteria.page}*#{criteria.amount}
    ]]>
        )S2 WHERE RNUM > (#{criteria.page}-1)*#{criteria.amount}
    </select>
    <select id="subsGetTotal" resultType="_int">
        SELECT COUNT(SUBS_NUMBER) FROM MONTHLY_SUBSCRIBE S
        WHERE S.PRODUCT_NUMBER = #{searchVo.productNumber}
        <if test="!''.equals(searchVo.subscriberInput)">
            AND S.USER_ID LIKE '%' || #{searchVo.subscriberInput} || '%'
        </if>
        <if test="'3day'.equals(searchVo.period)">
            AND (
            EXTRACT(DAY FROM S.SUBS_START_DATE) = EXTRACT(DAY FROM SYSDATE + INTERVAL '3' DAY)
            AND EXTRACT(DAY FROM S.SUBS_START_DATE) = EXTRACT(DAY FROM LAST_DAY(S.SUBS_START_DATE))
            OR (
            EXTRACT(DAY FROM SYSDATE + INTERVAL '3' DAY) = EXTRACT(DAY FROM S.SUBS_START_DATE)
            AND EXTRACT(DAY FROM S.SUBS_START_DATE) != EXTRACT(DAY FROM LAST_DAY(S.SUBS_START_DATE))
            )
            )
        </if>
    </select>






    <!--판매자 상태 수정 기능-->
    <update id="update">
        UPDATE MONTHLY_SELLER
        SET  SELLER_STATUS = #{sellerStatus}
        WHERE SELLER_NUMBER = #{sellerNumber}
    </update>

    <!--상품 상태 수정 기능-->
    <update id="updateProduct">
        UPDATE MONTHLY_PRODUCT
        SET  PRODUCT_STATUS = #{productStatus}
        WHERE PRODUCT_NUMBER = #{productNumber}
    </update>
    <!--회원 상태 수정 기능-->
    <update id="updateUsers">
        UPDATE MONTHLY_USER
        SET  USER_STATUS = #{userStatus}
        WHERE USER_NUMBER = #{userNumber}
    </update>

    <select id="getSellerStatusByDate" resultType="adminChartVo">
        SELECT TO_CHAR(s.SELLER_REGISTER_DATE, 'MM-DD') AS SELLER_REGISTER_DATE, COUNT(CASE WHEN s.SELLER_STATUS = 0 THEN 0 END) AS SELLER_STATUS_ONE_COUNT, COUNT(CASE WHEN s.SELLER_STATUS = 1 THEN 0 END) AS SELLER_STATUS_TWO_COUNT
        FROM MONTHLY_SELLER s
        WHERE s.SELLER_REGISTER_DATE >= TRUNC(SYSDATE) - 2
        GROUP BY TO_CHAR(s.SELLER_REGISTER_DATE, 'MM-DD')
        ORDER BY TO_CHAR(s.SELLER_REGISTER_DATE, 'MM-DD')
    </select>

    <select id="sellerMonth" resultType="adminChartVo">
        SELECT
            COUNT(CASE WHEN s.SELLER_STATUS = 0 THEN 0 END) AS SELLER_STATUS_ONE_COUNT,
            COUNT(CASE WHEN s.SELLER_STATUS = 1 THEN 0 END) AS SELLER_STATUS_TWO_COUNT
        FROM
            MONTHLY_SELLER s
        WHERE
                TO_CHAR(s.SELLER_REGISTER_DATE, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM')
    </select>

    <select id="threeAverage" resultType="adminChartVo">
        SELECT TO_CHAR(ROUND(COUNT(CASE WHEN s.SELLER_STATUS = 0 THEN 0 END) / 3, 2), 'FM9999999990.00') AS SELLER_STATUS_ONE_COUNT,
               TO_CHAR(ROUND(COUNT(CASE WHEN s.SELLER_STATUS = 1 THEN 0 END) / 3, 2), 'FM9999999990.00') AS SELLER_STATUS_TWO_COUNT
        FROM
            MONTHLY_SELLER s
        WHERE s.SELLER_REGISTER_DATE >= TRUNC(ADD_MONTHS(SYSDATE, -3), 'MM')
    </select>
    
    <!--강제구독취소 기능-->
    <delete id="deleteSubs">
        DELETE FROM MONTHLY_SUBSCRIBE
        WHERE SUBS_NUMBER = #{subsNumber}
    </delete>


</mapper>



<!--<select id="productSubsUserList" resultType="subsVo">-->
<!--SELECT U.USER_NUMBER, U.USER_NAME, U.USER_ID, S.SUBS_NUMBER, S.SUBS_START_DATE, B.BRAND_NUMBER, P.PRODUCT_NUMBER-->
<!--FROM MONTHLY_SUBSCRIBE S-->
<!--LEFT OUTER JOIN MONTHLY_USER U ON U.USER_NUMBER = S.USER_NUMBER-->
<!--LEFT OUTER JOIN MONTHLY_PRODUCT P ON S.PRODUCT_NUMBER = P.PRODUCT_NUMBER-->
<!--LEFT OUTER JOIN MONTHLY_BRAND B ON P.BRAND_NUMBER = B.BRAND_NUMBER-->
<!--<where>-->
<!--    S.PRODUCT_NUMBER = #{productNumber}-->
<!--    <if test="!''.equals(subscriberInput)">-->
<!--        AND U.USER_ID LIKE '%' || #{subscriberInput} || '%'-->
<!--    </if>-->

<!--    &lt;!&ndash;            <trim prefix="and">&ndash;&gt;-->
<!--    &lt;!&ndash;                  <if test="'3day'.equals(searchVo.period)">&ndash;&gt;-->
<!--    &lt;!&ndash;                         EXTRACT(DAY FROM S.SUBS_START_DATE) = EXTRACT(DAY FROM LAST_DAY(SYSDATE)) - 3&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;                 </if>&ndash;&gt;-->
<!--    &lt;!&ndash;            </trim>&ndash;&gt;-->
<!--</where>-->

<!--</select>-->



<!--    SELECT
        MP.PRODUCT_NUMBER,
        MP.PRODUCT_NAME,
       MB.BRAND_NAME,
        COUNT(MS.USER_NUMBER) AS USER_NUMBER_COUNT
    FROM
        MONTHLY_USER MU
            JOIN MONTHLY_SUBSCRIBE MS ON MU.USER_NUMBER = MS.USER_NUMBER
            JOIN MONTHLY_PRODUCT MP ON MS.PRODUCT_NUMBER = MP.PRODUCT_NUMBER
            JOIN MONTHLY_BRAND MB ON MP.BRAND_NUMBER = MB.BRAND_NUMBER
            JOIN MONTHLY_SELLER MSN ON MB.SELLER_NUMBER = MSN.SELLER_NUMBER
    WHERE
        MSN.SELLER_NUMBER = #{sellerNumber}
    GROUP BY
        MP.PRODUCT_NUMBER,
        MP.PRODUCT_NAME,
        MB.BRAND_NAME
        -->






















<!--    SELECT
        MP.PRODUCT_NUMBER,
        MP.PRODUCT_NAME,
       MB.BRAND_NAME,
        COUNT(MS.USER_NUMBER) AS USER_NUMBER_COUNT
    FROM
        MONTHLY_USER MU
            JOIN MONTHLY_SUBSCRIBE MS ON MU.USER_NUMBER = MS.USER_NUMBER
            JOIN MONTHLY_PRODUCT MP ON MS.PRODUCT_NUMBER = MP.PRODUCT_NUMBER
            JOIN MONTHLY_BRAND MB ON MP.BRAND_NUMBER = MB.BRAND_NUMBER
            JOIN MONTHLY_SELLER MSN ON MB.SELLER_NUMBER = MSN.SELLER_NUMBER
    WHERE
        MSN.SELLER_NUMBER = #{sellerNumber}
    GROUP BY
        MP.PRODUCT_NUMBER,
        MP.PRODUCT_NAME,
        MB.BRAND_NAME
        -->



